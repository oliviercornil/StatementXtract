import streamlit as st
import pdfplumber
import pandas as pd
import io
import re

# Fonction pour v√©rifier si une cha√Æne correspond au format d'une date (par exemple, JJ-MM-AAAA)
def is_valid_date(date_str):
    return bool(re.match(r"\d{2}-\d{2}-\d{4}", date_str))

# Fonction pour extraire les transactions du fichier PDF
def extract_data_from_pdf(pdf_file):
    transactions = []
    date_pattern = r"\d{2}-\d{2}-\d{4}"
    montant_pattern = r"-?\d+,\d{2}"

    with pdfplumber.open(pdf_file) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if text:
                lines = text.split("\n")
                for line in lines:
                    # V√©rifier si la ligne contient un montant
                    if re.search(montant_pattern, line):
                        # Extraire toutes les dates dans la ligne
                        dates_in_line = re.findall(date_pattern, line)
                        if dates_in_line:
                            date = dates_in_line[0]  # Premi√®re date comme date de transaction
                        else:
                            continue  # Ignorer si aucune date n'est trouv√©e

                        # V√©rifier si la date extraite est valide
                        if not is_valid_date(date):
                            continue

                        # Extraire le montant
                        montant_match = re.search(montant_pattern, line)
                        if montant_match:
                            montant_str = montant_match.group()
                            montant = float(montant_str.replace(",", "."))
                        else:
                            continue  # Ignorer si aucun montant n'est trouv√©

                        # Supprimer toutes les dates de la ligne pour obtenir le libell√©
                        line_without_dates = re.sub(date_pattern, '', line)
                        # Supprimer le montant du libell√©
                        line_without_montant = re.sub(montant_pattern, '', line_without_dates)
                        libelle = line_without_montant.strip()

                        # Supprimer les espaces multiples et les caract√®res sp√©ciaux
                        libelle = re.sub(' +', ' ', libelle)
                        libelle = libelle.strip("-‚Ä¢: ")

                        # Ajouter la transaction √† la liste
                        transactions.append({"Date": date, "Libel√©": libelle, "Montant": montant})
    return transactions

# Fonction pour convertir les donn√©es en fichier Excel
@st.cache_data
def convert_df_to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False)
    output.seek(0)
    return output

# Interface de l'application
st.title("üí≥ StatementXtract")
st.write("""
Bienvenue sur **StatementXtract**, l'application qui simplifie la conversion de vos relev√©s de carte de cr√©dit PDF en fichiers Excel pour les importer dans Odoo.

### Fonctionnalit√©s :
- Importez votre relev√© de carte de cr√©dit au format PDF.
- StatementXtract extrait automatiquement les informations de date, libell√© et montant pour chaque transaction.
- T√©l√©chargez le fichier Excel g√©n√©r√©.
- Importez le fichier Excel dans le journal de la carte de cr√©dit dans Odoo pour une gestion simplifi√©e de vos d√©penses.

**Conseil :** Assurez-vous que le fichier PDF suit un format standard pour une extraction optimale des donn√©es.

Commencez d√®s maintenant en t√©l√©chargeant votre fichier PDF !
""")

uploaded_pdf = st.file_uploader("T√©l√©chargez le fichier PDF de d√©penses de carte de cr√©dit", type="pdf")

if uploaded_pdf is not None:
    # Extraire les donn√©es du PDF
    data = extract_data_from_pdf(uploaded_pdf)

    if data:
        # Convertir les donn√©es en DataFrame et filtrer les lignes ind√©sirables
        df = pd.DataFrame(data)
        # Exclusion de certaines lignes non pertinentes
        df = df[~df['Libel√©'].str.contains("Limited'utilisation|Soldepr√©c√©dent|DOMICILIATION|D√©comptevia", case=False)]

        # Afficher les donn√©es
        st.write("Aper√ßu des donn√©es extraites :")
        st.dataframe(df)

        # Calculer et afficher le total des d√©penses
        total_depenses = df['Montant'].sum()
        st.write(f"**Total des d√©penses :** {total_depenses:.2f} EUR")

        # Convertir en Excel et proposer le t√©l√©chargement
        excel_data = convert_df_to_excel(df)
        st.download_button(
            label="T√©l√©charger le fichier Excel",
            data=excel_data,
            file_name="transactions_carte_credit.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.error("Aucune transaction valide n'a √©t√© trouv√©e dans le fichier PDF.")
